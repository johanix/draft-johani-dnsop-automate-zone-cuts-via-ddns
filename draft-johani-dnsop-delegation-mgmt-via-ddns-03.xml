<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.17 (Ruby 2.6.10) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>


<rfc ipr="trust200902" docName="draft-johani-dnsop-delegation-mgmt-via-ddns-02" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="DDNS Updates of Delegation Information">Automating DNS Delegation Management via DDNS</title>

    <author initials="J." surname="Stenstam" fullname="Johan Stenstam">
      <organization>The Swedish Internet Foundation</organization>
      <address>
        <postal>
          <country>Sweden</country>
        </postal>
        <email>johan.stenstam@internetstiftelsen.se</email>
      </address>
    </author>

    <date />

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>Delegation information (i.e. the NS RRset, possible glue, possible DS
records) should always be kept in sync between child zone and parent
zone. However, in practice that is not always the case.</t>

<t>When the delegation information is not in sync the child zone is
usually working fine, but without the amount of redundancy that the
zone owner likely expects to have. Hence, should any further problems
ensue it could have catastropic consequences.</t>

<t>The DNS name space has lived with this problem for decades and it
never goes away. Or, rather, it will never go away until a fully
automated mechanism for how to keep the information in sync
automatically is deployed.</t>

<t>This document proposes such a mechanism.</t>

<t>TO BE REMOVED: This document is being collaborated on in Github at:
<eref target="https://github.com/johanix/draft-johani-dnsop-delegation-mgmt-via-ddns">https://github.com/johanix/draft-johani-dnsop-delegation-mgmt-via-ddns</eref>.
The most recent working version of the document, open issues, etc, should all be
available there.  The author (gratefully) accept pull requests.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>

<t>For DNSSEC signed child zones with TLD registries as parents there is 
an emerging trend towards running so-called "CDS scanners" and "CSYNC 
scanners" by the parent.</t>

<t>These scanners detect publication of CDS records (the child signalling
a desire for an update to the DS RRset in the parent) and/or a CSYNC
record (the child signalling a desire for an update to the NS RRset
or, possibly, in-bailiwick glue in the parent.</t>

<t>The scanners have a number of drawbacks, including being inefficient
and slow. They are only applicable to DNSSEC-signed child zones and
they add significant complexity to the parent operations. But given
that, they do work.</t>

<t>I-D.ietf-dnsop-generalized-notify-01 proposes a method to alleviate
the inefficiency and slowness of scanners. But the DNSSEC requirement
and the complexity remain.</t>

<t>This document proposes an alternative mechanism to automate the
updating of delegation information in the parent zone for a child
zone based on DNS Dynamic Updates secured with SIG(0) signatures.</t>

<t>This alternative mechanism shares the property of being efficient
and provide rapid convergence (similar to generalized notifications in
conjuction with scanners). Furthermore, it has the advantages of not
requiring any scanners in the parent at all and also not being
dependent on the child (and parent) being DNSSEC-signed.</t>

<t>Knowledge of DNS NOTIFY <xref target="RFC1996"/> and DNS Dynamic Updates
<xref target="RFC2136"/> and <xref target="RFC3007"/> is assumed. DNS SIG(0) transaction
signatures are documented in <xref target="RFC2931"/>. In addition this
Internet-Draft borrows heavily from the thoughts and problem statement
from the Internet-Draft on Generalized DNS Notifications (work in progress).</t>

<section anchor="requirements-notation"><name>Requirements Notation</name>

<t>The key words "<strong>MUST</strong>", "<strong>MUST NOT</strong>", "<strong>REQUIRED</strong>", "<strong>SHALL</strong>",
"<strong>SHALL NOT</strong>", "<strong>SHOULD</strong>", "<strong>SHOULD NOT</strong>", "<strong>RECOMMENDED</strong>",
"<strong>NOT RECOMMENDED</strong>", "<strong>MAY</strong>", and "<strong>OPTIONAL</strong>" in this document
are to be interpreted as described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
when, and only when, they appear in all capitals, as shown here.</t>

</section>
</section>
<section anchor="is-there-a-use-case"><name>Is there a Use Case?</name>

<t>Because of the drawbacks of CDS and CSYNC scanners they are unlikely
to be able to fully automate the maintenance of delegation information
in all parent zones. The primary reasons are the hard requirement on
DNSSEC in the child zones and the complexity cost of operating the
scanner infrastructure. In practice, scanners are likely mostly
realistic for parent zones that are operated by well-resourced
registries.</t>

<t>All the parts of the DNS name space where the parent is smaller and
more resource constrained would be able to automate the delegation
management via this mechanism without the requirement of operating
scanners. Also all parts of the name space where there are child zones
that are not DNSSEC-signed would be able to use this.</t>

<t>Obviously, also well-resourced parent zones with DNSSEC-signed child
zones would be able to use this DNS UPDATE-based mechanism, but in those
cases scanners plus generalized notifications would also work.</t>

</section>
<section anchor="dns-notify-versus-dns-update"><name>DNS NOTIFY versus DNS UPDATE</name>

<t>DNS NOTIFY and DNS UPDATE messages share several properties
and are used to address similar issues.</t>

<section anchor="similarities-between-notify-and-update"><name>Similarities between NOTIFY and UPDATE</name>

<t>Both NOTIFY and UPDATE are "push" rather than "pull" messages and
therefore very efficient.</t>

<t>Both NOTIFY and UPDATE are messages, in DNS packet format. They are
used by one party (the sender) to inform another party (the recipient)
that some piece of DNS information has changed and that as a
consequence of this change the recipient of the message may want to
also make a change to its DNS data.</t>

<t>A NOTIFY (as per <xref target="RFC1996"/>) is only a hint and the recipient may
ignore it. But if the recipient does listen to the NOTIFY it should
make its own lookups to verify what has changed and whether that
should trigger any changes in the DNS data provided by the recipient.</t>

</section>
<section anchor="differencies-between-notify-and-update"><name>Differencies between NOTIFY and UPDATE</name>

<t>The difference between the UPDATE and the NOTIFY is that the UPDATE
contains the exact change that should (in the opinion of the sender)
be applied to the recipients DNS data. Furthermore, for secure Dynamic
Updates, the message also contains proof why the update should be
trusted (in the form of a digital signature by a key that the
recipient trusts).</t>

<t>In this document the term "Dynamic Update" or "DNS UPDATE" implies
secure dynamic update. Furthermore this document implies that the
signature algorithms are always based on asymmetric crypto keys, using
the same algorithms as are being used for DNSSEC. I.e. by using the
right algorithm the resulting signatures will be as strong as
DNSSEC-signatures.</t>

<t>DNS UPDATEs can be used to update any information in a zone (subject
to the policy of the recipient). But in the special case where the
data that is updated is the delegation information for a child zone
and it is sent across a zone cut (i.e. the child sends it to the
parent), it acts as a glorified generalized NOTIFY.</t>

<t>The DNS UPDATE in this case is essentially a message that says:</t>

<figure><artwork><![CDATA[
"the delegation information for this child zone has changed; here
is the exact change; here is the proof that the change is
authentic, please verify this signature"
]]></artwork></figure>

</section>
</section>
<section anchor="terminology"><name>Terminology</name>

<dl>
  <dt>SIG(0)</dt>
  <dd>
    <t>An assymmetric signing algorithm that allows the recipient to only
need to know the public key to verify a signature created by the
senders private key.</t>
  </dd>
</dl>

</section>
<section anchor="updating-delegation-information-via-dns-updates"><name>Updating Delegation Information via DNS UPDATEs.</name>

<t>This is not a new idea. There is lots of prior art and prior
documents, including the expired I-D.andrews-dnsop-update-parent-zones-04.</t>

<t>The functionality to update delegation information in the parent zone
via DNS UPDATE has been available for years in a least one DNS
implementation (BIND9). However, while DNS UPDATE is used extensively
inside organisations it has not seen much use across organisational
boundaries. And zone cuts, almost by definition, usually cuts across
such boundaries.</t>

<t>When sending a DNS UPDATE it is necessary to know where to send
it. Inside an organisation this information is usually readily
available. But outside the organisation it is not. And even if the
sender would know where to send the update, it is not at all clear
that the destination is reachable to the sender (the parent primary is
likely to be protected by firewalls and other measures).</t>

<t>This constitutes a problem for using DNS UPDATES across zone cuts.</t>

<t>Another concern is that traditionally DNS UPDATEs are sent to a
primary nameserver, and if the update signture verifies the update is
automatically applied to the DNS zone. This is often not an acceptable
mechanism. The recipient may, for good reason, require additional
policy checks and likely an audit trail. Finally, the change should in
many cases not be applied to the running zone but rather to some sort
of provisioning system or a database.</t>

<t>This creates another problem for using DNS UPDATEs for managing
delegation information.</t>

<t>Both problems are addressed by the proposed mechanism for locating the
recipient of a generalized NOTIFY.</t>

</section>
<section anchor="locating-the-target-for-a-generalized-notify-andor-dns-update"><name>Locating the Target for a generalized NOTIFY and/or DNS UPDATE.</name>

<t>Section 3 of I-D.ietf-dnsop-generalized-notify-01 proposes a new RR
type, tentatively with the mnemonic DSYNC, that has the following
format:</t>

<figure><artwork><![CDATA[
{qname}   IN  DSYNC  {RRtype} {scheme} {port} {target}
]]></artwork></figure>

<t>where {target} is the domain name of the recipient of the NOTIFY
message. {RRtype} is typically "CDS" or "CSYNC" in the case where
delegation information should be updated (there are also other uses of
generalized notifications). Finally, {scheme} is a number to indicate
the type of notification mechanism to use. Scheme=1 is defined as
"send a generalized NOTIFY to {target} on port {port}".</t>

<t>This document proposes the definition of a new {scheme} for the same
record that is used for generalized NOTIFY. Scheme=2 is here defined
as "send a DNS UPDATE". When parsing or presenting DNS zone data the 
eight bit number "2" should be replaced by the string "UPDATE", as
in the examples below.</t>

<t>Apart from defining a new scheme to specify the mechanism "UPDATE"
(rather than the mechanism "NOTIFY") this document does not say
anything about what Qname to look up or what RR type. The UPDATE
mechanism should use exactly the same method of locating the target of
the UPDATE as is used for generalized NOTIFY.</t>

<t>This lookup addresses the first issue with using DNS UPDATE across
organizational boundaries.</t>

<t>Example 1: a parent zone announces support for DNS UPDATE as a
mechanism for delegation synchronization for all child zones:</t>

<figure><artwork><![CDATA[
_dsync.parent.  IN DSYNC ANY UPDATE 5302 ddns-receiver.parent.
]]></artwork></figure>

<t>Example 2: a parent zone announces support different DNS UPDATE
targets on a per-child basis</t>

<figure><artwork><![CDATA[
childA._dsync.parent.  IN DSYNC ANY UPDATE 5302 ddns-receiver.registrar1.
childB._dsync.parent.  IN DSYNC ANY UPDATE 5302 ddns-receiver.registrar3.
childC._dsync.parent.  IN DSYNC ANY UPDATE 5302 ddns-receiver.registrar2.
]]></artwork></figure>

<t>The DSYNC RRset is looked up, typically by the child primary
nameserver, at the time that the delegation information for the child
zone changes in some way that would prompt an update in the parent
zone. When the {scheme} is "UPDATE" (i.e. the number 2 in the wire protocol) 
the interpretation is:</t>

<t><spanx style="verb">Send a DNS UPDATE to {target} on port 5302</spanx></t>

</section>
<section anchor="limitation-of-scope-for-the-proposed-mechanism"><name>Limitation of Scope for the Proposed Mechanism</name>

<t>DNS UPDATE is in wide use all over the world, for all sorts of 
purposes. It is not in wide use (if used at all) across organizational 
boundaries. This document only address the specific case of a child 
zone that makes a change in its DNS information that will require an 
update of the corresponding information in the parent zone. This 
includes:</t>

<t><list style="symbols">
  <t>changes to the NS RRset</t>
  <t>changes to glue (if any)</t>
  <t>changes to the DS RRset (if any)</t>
</list></t>

<t>Only for those specific cases is the descibed mechanism proposed.</t>

</section>
<section anchor="the-dns-update-receiver"><name>The DNS UPDATE Receiver</name>

<t>While the simplest design is to send the DNS UPDATEs to the primary
name server of the parent it will in most cases be more interesting to
send them to a separate UPDATE Receiver. To separate the primary name
server from the UPDATE Receiver use a {target} with addresses separate
from the addresses of the primary name server.</t>

<section anchor="processing-the-update-in-the-dns-update-receiver"><name>Processing the UPDATE in the DNS UPDATE Receiver</name>

<t>The receiver of the DNS UPDATE messages should implement a suitably 
strict policy for what updates are accepted (typically only allowing 
updates to the NS RRset, glue and DS RRset).</t>

<t>Furthermore, it is strongly recommended that the policy is further
tightened by only allowing updates to the delegation information of a
child zone with the exact same name as the name of the SIG(0) key the
signed the UPDATE request. I.e. an UPDATE request for the delegation
information for the zone <spanx style="verb">child.parent.</spanx> should only be processed if
it is signed by a SIG(0) key with the name <spanx style="verb">child.parent.</spanx> and the
signature verifies correctly.</t>

<t>Once the UPDATE has been verified to be correctly signed by a known
key with the correct name and also adhere to the update policy it
should be subjected to the same set of correctness tests as CDS/CSYNC
scanner would have performed. If these requirements are also fulfilled
the change may be applied to the parent zone in whatever manner the
parent zone is maintained (as a text file, data in a database, via and
API, etc).</t>

</section>
</section>
<section anchor="interpretation-of-the-response-to-the-dns-update"><name>Interpretation of the response to the DNS UPDATE.</name>

<t>All DNS transactions are designed as a pair of messages and this is
true also for DNS UPDATE. The interpretation of the different
responses to DNS UPDATE are fully documented in <xref target="RFC2136"/>, section
2.2.</t>

<section anchor="rcode-noerror"><name>RCODE NOERROR</name>

<t>A response with rcode=0 ("NOERROR") should be interpreted as a
confirmation that the DNS UPDATE has been received and
accepted. I.e. the change to the parent DNS data should be expected to
be published in the parent zone at some future time.</t>

</section>
<section anchor="rcode-refused"><name>RCODE REFUSED</name>

<t>A response with rcode=5 ("REFUSED") should be interpreted as a
permanent signal that DNS UPDATEs are not supported by the
receiver. This would indicate a parent misconfiguration, as the UPDATE
should not be sent unless the parent has announced support for DNS
UPDATE via publication of an appropriate target location record.</t>

</section>
<section anchor="rcode-badkey"><name>RCODE BADKEY</name>

<t>A response with rcode=17 ("BADKEY") should be interpreted as a
definitive statement that the DNS UPDATE Receiver does not have access
to the public SIG(0) key needed for signature verification. In this
case the child should fall back to bootstrap of the SIG(0) public key
into the DNS UPDATE Receiver, see below.</t>

</section>
<section anchor="no-response-to-a-dns-update"><name>No response to a DNS UPDATE</name>

<t>The case of no response is more complex, as it is not possible to know
whether the DNS UPDATE actually reached the reciever (or was lost in
transit) or the response was not sent (or lost in transit).</t>

<t>For this reason it is suggested that a lack of response is left as
implementation dependent. That way the implementation has sufficient
freedom do chose a sensible approach. Eg. if the sender of the DNS
UPDATE (like the primary nameserver of the child zone) only serves a
single child, then resending the DNS UPDATE once or twice may be ok
(to ensure that the lack of response is not due to packets being lost
in transit). On the other hand, if the sender serves a large number of
child zones below the same parent zone, then it may already know that
the receiver for the DNS UPDATEs is not responding for any of the
child zones, and then resending the update immediately is likely
pointless.</t>

</section>
</section>
<section anchor="management-of-sig0-public-keys"><name>Management of SIG(0) Public Keys</name>

<t>Only the child should have access to the SIG(0) private key. The
corresponding SIG(0) public key should preferably be published in DNS,
but it doesn't have have to be. The SIG(0) public key only needs to be
available to the parent DNS UPDATE Receiver. Keeping all the public
SIG(0) keys for different child zones in some sort of database is
perfectly fine.</t>

<section anchor="bootstrapping-the-sig0-public-key-into-the-dns-update-receiver"><name>Bootstrapping the SIG(0) Public Key Into the DNS UPDATE Receiver</name>

<t>Bootstrap is simpler if the child zone is signed. Therefore the signed
and unsigned cases are described separately.</t>

<section anchor="child-zone-is-dnssec-signed"><name>Child zone is DNSSEC-signed</name>

<t>If the child zone is DNSSEC-signed, then the preferred mechanism is to
publish the public SIG(0) key as a KEY record at the child apex. This
can then be looked up and validated by the DNS UPDATE Receiver.</t>

<figure><artwork><![CDATA[
child.parent. IN KEY ...
child.parent. IN RRSIG KEY ...
]]></artwork></figure>

<t>However, the receiver should have access to the key at the time of
receiving the update, it should not have to do DNS lookups and DNSSEC
validation in response to a DNS UPDATE message (that might open up for
various types of attacks). Therefore the proposal is to trigger the
parent reciver to lookup and validate the key by issuing a DNS UPDATE
that only contains an addition (no delete) of the KEY record from the
child zone:</t>

<figure><artwork><![CDATA[
ADD child.parent. {ttl} IN KEY ...
]]></artwork></figure>

<t>When receiving such a message the reciever SHOULD put that key into a
queue for later look up of the corresponding KEY record and validation
of the DNSSEC-signature. In case of validation failure (or absence of
a DNSSEC signature) the SIG(0) SHOULD NOT be added to the set of keys
that the receiver knows and trust. If the validation succeeds the key
should be added to the set of trusted public SIG(0) keys stored 
locally at the receiver.</t>

</section>
<section anchor="child-zone-is-unsigned"><name>Child zone is unsigned</name>

<t>In the absence of a DNSSEC-based validation path some alternative
mechanism will have ot be found. The primary audience for this DNS
UPDATE based synchronization mechanism is "non-registries". In those
cases there is by definition some mechanism in place to communicate
information from the child to the parent, be it email, a web form,
pieces of paper or something else. The same mechanism can be extended
to also be used to communicate the initial SIG(0) public key from the
child to the parent.</t>

<t>It should also be noted that the bootstrap problem is essentially
identical to the "automatic DNSSEC Bootstrap via CDS" service that
multiple TLD registries provide today. Hence, to bootstrap the public
SIG(0) key for child zone it is possible for the parent to scan the
child zone for the KEY RRset. To make spoofed responses more difficult
it is possible to also add a requirement to use a more stable
transport, like TCP (or in the future DOT, DOH or DOQ once those
become more generally available for DNS queries to authoritative
servers). If the received KEY RRset is consistent from multiple
vantage points and multiple times then it is considered authentic and
stored by the parent's UPDATE Receiver as a trusted SIG(0) key for the
child.</t>

<t>Should a "registry" parent want to support this mechanism (as a
service to its unsigned children) then the most likely model is that
the target of the DNS UPDATE is operated by the registrar (or possibly
that the DNS UPDATE is forwarded to the registrar). The registrar
performs its normal verifications of a change and then transforms the
update into an EPP <xref target="RFC5730"/> transaction to communicate it to the
registry.</t>

</section>
</section>
<section anchor="rolling-the-sig0-key"><name>Rolling the SIG(0) Key</name>

<t>Once the parent (or registrar) DNS UPDATE Receiver has the key, the
child can update it via a DNS UPDATE just like updating the NS RRset,
the DS RRset or the glue in the parent zone (assuming a suitable DNS
UPDATE policy in the parent). I.e. only the initial bootstrapping of
the key is an issue.</t>

<t>Note, however, that the alternative of re-bootstrapping (by whatever
bootstrapping mechanism was used) in case of a key compromise may be a
better alternative to the parent supporting key rollover for child
SIG(0) keys. The decision of whether to allow SIG(0) key rollover via
DNS UPDATE is left as parent-side policy.</t>

</section>
</section>
<section anchor="scalability-of-the-proposed-mechanism"><name>Scalability of the Proposed Mechanism</name>

<t>The primary existing mechanism for automatic synchronization of DNS
delegation information is based on parent-side "scanning" of the child
zones for CDS and/or CSYNC RRsets, performing DNSSEC validation on the
result and then, in the CSYNC case, based on the result, issue and
validate a potentially large number of additional DNS queries, all of
which must be DNSSEC validated. This makes a CDS/CSYNC scanner for a
parent with a significant number of delegations a complex and resource
consuming service. Among the issues are rate-limiting by large DNS
operators and inherent difficulties in issuing millions of recursive
DNS queries where all received data must be validated.</t>

<t>By comparision, the DNS UPDATE based mechanism for automatic
synchronization shifts most of the effort to the child side. It is the
child that is responsible for detecting the need to update the
delegation information in the parent zone (which makes sense as it is
the child that has made a change and therefore, in many cases, already
"knows"). It is the child rather than the parent that computes what
records should be added or removed. All of this is good for
scalability.</t>

<t>Furthermore, the information collection and validation effort for the
UPDATE Receiver is restricted to validation of a single DNS message,
using a SIG(0) key that the UPDATE Receiver already has. The UPDATE
Receiver does not have to issue any DNS queries, it does not have to
follow any DNSSEC signature chains to perform validation.</t>

<t>Hence, as the data collection and validation is much simplified the
task of the UPDATE Receiver is mostly focused on the policy issues of
whether to approve the UPDATE or not.</t>

</section>
<section anchor="security-considerations"><name>Security Considerations.</name>

<t>Any fully automatic mechanism to update the contents of a DNS zone
opens up a potential vulnerability should the mechanism not be
implemented correctly.</t>

<t>In this case the definition of "correct" is a question for the
receiver of the DNS UPDATE. The receiver should validate the
authenticity of the DNS UPDATE and then do the same checks and
verifications as a CDS or CSYNC scanner does. The difference from the
scanner is only in the validation: single SIG(0) signature by a key
that the UPDATE Receiver trusts vs DNSSEC signatures that chain back
to a DNSSEC trust anchor that the validator trusts.</t>

<t>Another issue of concern is whether a parent-side service that
provides support for changes to child delegation information via DNS
UPDATE opens up for potential denial-of-service attacks. The answer is
likely no, as it is possible to have a very strict rate-limiting
policy based on the observation that no child zone should have a
legitimate need to change its delegation information freqently.</t>

<t>Furthermore, as the location of the UPDATE Receiver can be separated
from any parent name server even in the worst case the only service
that can be subject to an attack is the UPDATE Receiver itself, which
is a service that previously did not exist.</t>

</section>
<section anchor="iana-considerations"><name>IANA Considerations.</name>

<t>None.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="acknowledgements"><name>Acknowledgements.</name>

<t><list style="symbols">
  <t>Peter Thomassen and I together came up with the location mechanism
for the generalized notifications, which this draft relies upon.</t>
  <t>Mark Andrews provided the initial inspiration for writing some code
to experiment with the combination of the location mechanism from
the generalised notifications with DNS UPDATEs across zone cuts.</t>
</list></t>

</section>


  </middle>

  <back>


    <references title='Normative References'>



<reference anchor='RFC1996' target='https://www.rfc-editor.org/info/rfc1996'>
  <front>
    <title>A Mechanism for Prompt Notification of Zone Changes (DNS NOTIFY)</title>
    <author fullname='P. Vixie' initials='P.' surname='Vixie'/>
    <date month='August' year='1996'/>
    <abstract>
      <t>This memo describes the NOTIFY opcode for DNS, by which a master server advises a set of slave servers that the master's data has been changed and that a query should be initiated to discover the new data. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='1996'/>
  <seriesInfo name='DOI' value='10.17487/RFC1996'/>
</reference>

<reference anchor='RFC2136' target='https://www.rfc-editor.org/info/rfc2136'>
  <front>
    <title>Dynamic Updates in the Domain Name System (DNS UPDATE)</title>
    <author fullname='P. Vixie' initials='P.' role='editor' surname='Vixie'/>
    <author fullname='S. Thomson' initials='S.' surname='Thomson'/>
    <author fullname='Y. Rekhter' initials='Y.' surname='Rekhter'/>
    <author fullname='J. Bound' initials='J.' surname='Bound'/>
    <date month='April' year='1997'/>
    <abstract>
      <t>Using this specification of the UPDATE opcode, it is possible to add or delete RRs or RRsets from a specified zone. Prerequisites are specified separately from update operations, and can specify a dependency upon either the previous existence or nonexistence of an RRset, or the existence of a single RR. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='2136'/>
  <seriesInfo name='DOI' value='10.17487/RFC2136'/>
</reference>

<reference anchor='RFC3007' target='https://www.rfc-editor.org/info/rfc3007'>
  <front>
    <title>Secure Domain Name System (DNS) Dynamic Update</title>
    <author fullname='B. Wellington' initials='B.' surname='Wellington'/>
    <date month='November' year='2000'/>
    <abstract>
      <t>This document proposes a method for performing secure Domain Name System (DNS) dynamic updates. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='3007'/>
  <seriesInfo name='DOI' value='10.17487/RFC3007'/>
</reference>

<reference anchor='RFC2931' target='https://www.rfc-editor.org/info/rfc2931'>
  <front>
    <title>DNS Request and Transaction Signatures ( SIG(0)s )</title>
    <author fullname='D. Eastlake 3rd' initials='D.' surname='Eastlake 3rd'/>
    <date month='September' year='2000'/>
    <abstract>
      <t>This document describes the minor but non-interoperable changes in Request and Transaction signature resource records ( SIG(0)s ) that implementation experience has deemed necessary. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='2931'/>
  <seriesInfo name='DOI' value='10.17487/RFC2931'/>
</reference>

<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname='S. Bradner' initials='S.' surname='Bradner'/>
    <date month='March' year='1997'/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name='BCP' value='14'/>
  <seriesInfo name='RFC' value='2119'/>
  <seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>

<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
  <front>
    <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
    <author fullname='B. Leiba' initials='B.' surname='Leiba'/>
    <date month='May' year='2017'/>
    <abstract>
      <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
    </abstract>
  </front>
  <seriesInfo name='BCP' value='14'/>
  <seriesInfo name='RFC' value='8174'/>
  <seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>

<reference anchor='RFC5730' target='https://www.rfc-editor.org/info/rfc5730'>
  <front>
    <title>Extensible Provisioning Protocol (EPP)</title>
    <author fullname='S. Hollenbeck' initials='S.' surname='Hollenbeck'/>
    <date month='August' year='2009'/>
    <abstract>
      <t>This document describes an application-layer client-server protocol for the provisioning and management of objects stored in a shared central repository. Specified in XML, the protocol defines generic object management operations and an extensible framework that maps protocol operations to objects. This document includes a protocol specification, an object mapping template, and an XML media type registration. This document obsoletes RFC 4930. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name='STD' value='69'/>
  <seriesInfo name='RFC' value='5730'/>
  <seriesInfo name='DOI' value='10.17487/RFC5730'/>
</reference>




    </references>



<section anchor="change-history-to-be-removed-before-publication"><name>Change History (to be removed before publication)</name>

<t><list style="symbols">
  <t>draft-johani-dnsop-delegation-mgmt-via-ddns-03</t>
</list></t>

<ul empty="true"><li>
  <t>Update the draft based on the excellent dnsdir review of 
draft-ietf-dnsop-generalized-notify-01 by Patrick Mevsek.</t>
</li></ul>

<ul empty="true"><li>
  <t>Expand the section on alternatives for initial bootstrap
to suggest a mechanism similar to what is used for automatic
bootstrap of DNSSEC signed delegations via multiple queries
for child the CDS RRset.</t>
</li></ul>

<ul empty="true"><li>
  <t>A couple of typos and nits fixed.</t>
</li></ul>

<t><list style="symbols">
  <t>draft-johani-dnsop-delegation-mgmt-via-ddns-02</t>
</list></t>

<ul empty="true"><li>
  <t>Update the references to the (updated) I-D for generalized
notifications.</t>
</li></ul>

<ul empty="true"><li>
  <t>Remove duplicated descriptions between the two drafts. It is
sufficient that the generalized notification draft describes the
mechanics.</t>
</li></ul>

<t><list style="symbols">
  <t>draft-johani-dnsop-delegation-mgmt-via-ddns-01</t>
</list></t>

<ul empty="true"><li>
  <t>Change the RRtype from the original "NOTIFY" to the proposed "DSYNC"</t>
</li></ul>

<ul empty="true"><li>
  <t>Expand the description of how to interpret different RCODE responses
to the UPDATE. Expand the description of bootstrapping
alternatives. Change the mnemonic of the RR type used from "NOTIFY"
to "DSYNC" in the examples.</t>
</li></ul>

<t><list style="symbols">
  <t>draft-johani-dnsop-delegation-mgmt-via-ddns-00</t>
</list></t>

<ul empty="true"><li>
  <t>Initial public draft.</t>
</li></ul>

</section>


  </back>

<!-- ##markdown-source:
H4sIAPGTimYAA61cbXPjxpH+Pr9ijv4QcYuk9yU5n3UV32kl2VZsrzbS7qVc
qdQFBIYkLBCgMYC4jGv/+/XrzACk1ufLuVJZkQQGMz3dTz/9MpjP56Yru8qd
28lF3zXbrCvrtb16c2+vXOXW8LGp7Q9Zna3d1tWdfSwzewU/T0y2XLbu8Zw+
2fe7Iuuct80qve+mXjXtlv42RZPX2RaeU7TZqpv/1GyyupwXtW928yLcMt+u
t90cHjIv4Kf585cGxz23v1xdvLv+aHL4sG7aw7n1XWFMuWvPbdf2vnv5/PmX
cHHWuuwcHtu5tnad2Tftw7pt+t05ruj2rf0LfIHr+wa/NA/uAFcU8Yb5Fc7N
GN9ldfHfWdXU8OiD82ZXntu/dk0+s75pu9atPPx12OIffzMm67tN054bOzcW
/itrf27/tLD3nathpC19yWv/E656+EPTrkEQ/6DVn9t3G2fv964o/SbMyn7d
9HXBUsQ7cvjYoQzwQsffuW1WVueWpLrwMv5/ljKC78pV5yrv4DdnTM2b8ujO
QYS6RfRpPp/bbOm7NstBDMlOlnEn7Vm5cAvbwUxh4+/uvOtmdtd4Xy4rZ9dV
75KPV/emdTkI2U+t3zR9Vdis2mcHb5fOPrhdByODJOscPnd752qbb0q46B8g
egubYHewpXVn8PPCftvs3aNrZ3jTDudY5g4mksEo3tZNp2Pj3PLMu4Uxf9nA
mPi5OL0YuVFnQXfGGZTe9L7Pqupg96I6q7KGBS77zu5L2Hb4F+/JtrgpqP6t
K3C36vzAM4Nfafa22deutVX54GA092Hn8g5m2thN9ohLc3UO46qM6oNd9S3c
28JCG5Dk1hvY1B6m1KECwDV4H6yyy2C7ml2Zw9e1dz/3OJCHlaMqoWmi5lm/
y0BUm8zDBB5dQXOHqcHqZXgLIgEZ5VkBVoyCLztTo7DtusFvQK4LewuibzOc
1QznsS+ryupFdIkFIZSVzWDyIDM0DEQUeN7W5Wjvnp+zafa48gfndiS9wYbw
Tui9ZU7Sh4kWblc1B1fQ0vBzk/cESbAC0DeYpO/zDTw7PAuvvLWvr+3d9Q+3
/3V9heaV3liiFuKe5k1VZcumpanyHL4BAfVLm3Xn5q+brtv5888/X9N3i7zZ
fs7w9eHz3wBmfzv7/xlnuqCt3Ta+A2XLcSGqm7ATHmUIakgqLwud2WbnUNVB
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
AA==

-->

</rfc>

