<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.17 (Ruby 2.6.10) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>


<rfc ipr="trust200902" docName="draft-johani-dnsop-delegation-mgmt-via-ddns-00" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="DDNS Updates of Delegation Information">Automating DNS Delegation Management via DDNS</title>

    <author initials="J." surname="Stenstam" fullname="Johan Stenstam">
      <organization>The Swedish Internet Foundation</organization>
      <address>
        <postal>
          <country>Sweden</country>
        </postal>
        <email>johan.stenstam@internetstiftelsen.se</email>
      </address>
    </author>

    <date />

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>Delegation information (i.e. the NS RRset, possible glue, possible DS
records) should always be kept in sync between child zone and parent
zone. However, in practice that is not always the case.</t>

<t>When the delegation information is not in sync the child zone is
usually working fine, but without the amount of redundancy that the
zone owner likely expects to have. Hence, should any further problems
ensue it could have catastropic consequences.</t>

<t>The DNS name space has lived with this problem for decades and it
never goes away. Or, rather, it will never go away until a fully
automated mechanism for how to keep the information in sync
automatically is deployed.</t>

<t>This document proposes such a mechanism.</t>

<t>TO BE REMOVED: This document is being collaborated on in Github at:
<eref target="https://github.com/johanix/draft-johani-dnsop-delegation-mgmt-via-ddns">https://github.com/johanix/draft-johani-dnsop-delegation-mgmt-via-ddns</eref>.
The most recent working version of the document, open issues, etc, should all be
available there.  The author (gratefully) accept pull requests.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>

<t>For DNSSEC signed child zones with TLD registries as parents there is 
an emerging trend towards running so-called "CDS scanners" and "CSYNC 
scanners" by the parent.</t>

<t>These scanners detect publication of CDS records (the child signalling
a desire for an update to the DS RRset in the parent) and/or a CSYNC
record (the child signalling a desire for an update to the NS RRset
or, possibly, in-bailiwick glue in the parent.</t>

<t>The scanners have a number of drawbacks, including being inefficient
and slow. They are only applicable to DNSSEC-signed child zones and
they add significant complexity to the parent operations. But given
that, they do work.</t>

<t>Generalized DNS Notifications (see
draft-ietf-dnsop-generalized-notify-00) propose a method to
alleviate the inefficiency and slowness of scanners. But the DNSSEC
requirement and the complexity remain.</t>

<t>This document proposes an alternative mechanism to automate the
updating of delegation information in the parent zone for a child
zone based on DNS Dynamic Updates secured with SIG(0) signatures.</t>

<t>This alternative mechanism shares the property of being efficient
and provide rapid convergence (similar to generalized notifications in
conjuction with scanners). Furthermore, it has the advantages of not
requiring any scanners in the parent at all and also not being
dependent on the child (and parent) being DNSSEC-signed.</t>

<t>Knowledge of DNS NOTIFY <xref target="RFC1996"/> and DNS Dynamic Updates
<xref target="RFC2136"/> and <xref target="RFC3007"/> is assumed. DNS SIG(0) transaction
signatures are documented in <xref target="RFC2931"/>. In addition this
Internet-Draft borrows heavily from the thoughts and problem statement
from the Internet-Draft on Generalized DNS Notifications (work in progress).</t>

<section anchor="requirements-notation"><name>Requirements Notation</name>

<t>The key words "<strong>MUST</strong>", "<strong>MUST NOT</strong>", "<strong>REQUIRED</strong>", "<strong>SHALL</strong>",
"<strong>SHALL NOT</strong>", "<strong>SHOULD</strong>", "<strong>SHOULD NOT</strong>", "<strong>RECOMMENDED</strong>",
"<strong>NOT RECOMMENDED</strong>", "<strong>MAY</strong>", and "<strong>OPTIONAL</strong>" in this document
are to be interpreted as described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
when, and only when, they appear in all capitals, as shown here.</t>

</section>
</section>
<section anchor="is-there-a-use-case"><name>Is there a Use Case?</name>

<t>Because of the drawbacks of CDS and CSYNC scanners they are unlikely
to be able to fully automate the maintenance of delegation information
in all parent zones. The primary reasons are the hard requirement on
DNSSEC in the child zones and the complexity cost of operating the
scanner infrastructure. In practice, scanners are likely mostly
realistic for parent zones that are operated by well-resourced
registries.</t>

<t>All the parts of the DNS name space where the parent is smaller and
more resource constrained would be able to automate the delegation
management via this mechanism without the requirement of operating
scanners. Also all parts of the name space where there are child zones
that are not DNSSEC-signed would be able to use this.</t>

<t>Obviously, also well-resourced parent zones with DNSSEC-signed child
zones would be able to use this DNS UPDATE-based mechanism, but in those
cases scanners plus generalized notifications would also work.</t>

</section>
<section anchor="dns-notify-versus-dns-update"><name>DNS NOTIFY versus DNS UPDATE</name>

<t>DNS NOTIFY and DNS UPDATE messages share several properties
and are used to address similar issues.</t>

<section anchor="similarities-between-notify-and-update"><name>Similarities between NOTIFY and UPDATE</name>

<t>Both NOTIFY and UPDATE are "push" rather than "pull" messages and
therefore very efficient.</t>

<t>Both NOTIFY and UPDATE are messages, in DNS packet format. They are
used by one party (the sender) to inform another party (the recipient)
that some piece of DNS information has changed and that as a
consequence of this change the recipient of the message may want to
also make a change to its DNS data.</t>

<t>A NOTIFY (as per <xref target="RFC1996"/>) is only a hint and the recipient may
ignore it. But if the recipient does listen to the NOTIFY it should
make its own lookups to verify what has changed and whether that
should trigger any changes in the DNS data provided by the recipient.</t>

</section>
<section anchor="generalized-notify-vs-original-notify"><name>Generalized NOTIFY vs original NOTIFY</name>

<t>This is a proposed extension to the use of <xref target="RFC1996"/> NOTIFY. The
extension covers using NOTIFY(CSYNC) to signal the publication of a CSYNC
record in the child zone (prompting the parent zone to look it up and
make a decison on whether to update the delegation information for the
child zone based upon what is found. Another type is NOTIFY(CDS) which
does the same, except it is used to prompt the parent to decide
whether to update the child DS RRset (or not).</t>

<t>A generalized NOTIFY is typically sent across a zone cut (from child
to parent) and the recipient is likely a CSYNC or CDS scanner. In this
case it is essentially a message that says:</t>

<figure><artwork><![CDATA[
"the delegation information for this child has changed; I suggest
that you go and check it out yourself"
]]></artwork></figure>

</section>
<section anchor="differencies-between-notify-and-update"><name>Differencies between NOTIFY and UPDATE</name>

<t>The difference between the UPDATE and the NOTIFY is that the UPDATE
contains the exact change that should (in the opinion of the sender)
be applied to the recipients DNS data. Furthermore, for secure Dynamic
Updates, the message also contains proof why the update should be
trusted (in the form of a digital signature by a key that the
recipient trusts).</t>

<t>In this document the term "Dynamic Update" or "DNS UPDATE" implies
secure dynamic update. Furthermore this document implies that the
signature algorithms are always based on asymmetric crypto keys, using
the same algorithms as are being used for DNSSEC. I.e. by using the
right algorithm the resulting signatures will be as strong as
DNSSEC-signatures.</t>

<t>DNS UPDATEs can be used to update any information in a zone (subject
to the policy of the recipient). But in the special case where the
data that is updated is the delegation information for a child zone
and it is sent across a zone cut (i.e. the child sends it to the
parent), it acts as a glorified generalized NOTIFY.</t>

<t>The DNS UPDATE in this case is essentially a message that says:</t>

<figure><artwork><![CDATA[
"the delegation information for this child zone has changed; here
is the exact change; here is the proof that the change is
authentic, please verify this signature"
]]></artwork></figure>

</section>
</section>
<section anchor="terminology"><name>Terminology</name>

<dl>
  <dt>SIG(0)</dt>
  <dd>
    <t>An assymmetric signing algorithm that allows the recipient to only
need to know the public key to verify a signature created by the
senders private key.</t>
  </dd>
</dl>

</section>
<section anchor="updating-delegation-information-via-dns-updates"><name>Updating Delegation Information via DNS UPDATEs.</name>

<t>This is not a new idea. The functionality to update delegation
information in the parent zone via DNS UPDATE has been available for
years in a least one DNS implementation (BIND9). However, while DNS
UPDATE is used extensively inside organisations it has not seen much
use across organisational boundaries. And zone cuts, almost by
definition, usually cuts across such boundaries.</t>

<t>When sending a DNS UPDATE it is necessary to know where to send
it. Inside an organisation this information is usually readily
available. But outside the organisation it is not. And even if the
sender would know where to send the update, it is not at all clear
that the destination is reachable to the sender (the parent primary is
likely to be protected by firewalls and other measures).</t>

<t>This constitutes a problem for using DNS UPDATES across zone cuts.</t>

<t>Another concern is that traditionally DNS UPDATEs are sent to a
primary nameserver, and if the update signture verifies the update is
automatically applied to the DNS zone. This is often not an acceptable
mechanism. The recipient may, for good reason, require additional
policy checks and likely an audit trail. Finally, the change should in
many cases not be applied to the running zone but rather to some sort
of provisioning system or a database.</t>

<t>This creates another problem for using DNS UPDATEs for managing
delegation information.</t>

<t>Both problems are addressed by the proposed mechanism for locating the
recipient of a generalized NOTIFY.</t>

</section>
<section anchor="locating-the-target-for-a-generalized-notify-andor-dns-update"><name>Locating the Target for a generalized NOTIFY and/or DNS UPDATE.</name>

<t>The generalized notifications I-D proposes a new RR type, tentatively
with the mnemonic NOTIFY that has the following format:</t>

<figure><artwork><![CDATA[
{parent zone}   IN  NOTIFY  {RRtype} {scheme} {port} {target}
]]></artwork></figure>

<t>where {parent zone} is the domain name of the parent zone and
{target} is the domain name of the recipient of the NOTIFY. {RRtype}
is typically "CDS" or "CSYNC" in the case where delegation
information should be updated (there are also other uses of
generalized notifications). Finally, {scheme} is a number to indicate
the type of notification mechanism to use. Scheme=1 is defined as
"send a generalized NOTIFY".</t>

<t>Example for where children of <spanx style="verb">parent.</spanx> should send NOTIFY(CSYNC):</t>

<figure><artwork><![CDATA[
parent. IN NOTIFY CSYNC 1 5301 csync-scanner.parent.
]]></artwork></figure>

<t>This record is looked up by the child primary nameserver at the time
that the child primary is about to publish a new CSYNC record in the
child zone (or the equivalent for a CDS). The interpretation is:</t>

<t><spanx style="verb">Send a NOTIFY(CSYNC) to csync-scanner.parent. on port 5301</spanx></t>

<section anchor="locating-the-target-for-a-dns-update"><name>Locating the Target for a DNS UPDATE.</name>

<t>This document proposes the definition of a new {scheme} for the same
record that is used for generalized NOTIFY. Scheme=2 is here defined
as "send a DNS UPDATE".</t>

<t>Example:</t>

<figure><artwork><![CDATA[
parent.  IN NOTIFY ANY 2 5302 ddns-receiver.parent.
]]></artwork></figure>

<t>This record is looked up by the child primary nameserver at the time
that the delegation information for the child zone changes (typically
causing the child to publish a new CSYNC record and/or a new CDS
record). The interpretation is:</t>

<t><spanx style="verb">Send a DNS UPDATE to ddns-receiver.parent. on port 5302</spanx></t>

</section>
</section>
<section anchor="limitation-of-scope-for-the-proposed-mechanism"><name>Limitation of Scope for the Proposed Mechanism</name>

<t>DNS UPDATE is in wide use all over the world, for all sorts of 
purposes. It is not in wide use (if used at all) across organizational 
boundaries. This document only address the specific case of a child 
zone that makes a change in its DNS information that will require an 
update of the corresponding information in the parent zone. This 
includes:</t>

<t><list style="symbols">
  <t>changes to the NS RRset</t>
  <t>changes to glue (if any)</t>
  <t>changes to the DS RRset (if any)</t>
</list></t>

<t>Only for those specific cases is the descibed mechanism proposed.</t>

</section>
<section anchor="processing-the-update-in-the-dns-update-receiver"><name>Processing the UPDATE in the DNS UPDATE Receiver</name>

<t>The receiver of the DNS UPDATE messages should implement a suitably 
strict policy for what updates are accepted (typically only allowing 
updates to the NS RRset, glue and DS RRset).</t>

<t>Furthermore, it is strongly recommended that the policy is further
tightened by only allowing updates to the delegation information of a
child zone with the exact same name as the name of the SIG(0) key the
signed the UPDATE request. I.e. an UPDATE request for the delegation
information for the zone <spanx style="verb">child.parent.</spanx> should only be processed if
it is signed by a SIG(0) key with the name <spanx style="verb">child.parent.</spanx> and the
signature verifies correctly.</t>

<t>Once the UPDATE has been verified to be correctly signed by a known
key with the correct name and also adhere to the update policy it
should be subjected to the same set of correctness tests as CDS/CSYNC
scanner would have performed. If these requirements are also fulfilled
the change may be applied to the parent zone in whatever manner the
parent zone is maintained (as a text file, data in a database, via and
API, etc).</t>

</section>
<section anchor="interpretation-of-the-response-to-the-dns-update"><name>Interpretation of the response to the DNS UPDATE.</name>

<t>All DNS transactions are designed as a pair of messages and this is
true also for DNS UPDATE. The interpretation of the different
responses to DNS UPDATE are fully documented in <xref target="RFC2136"/>, section
2.2.</t>

<section anchor="rcode-refused"><name>RCODE REFUSED</name>

<t>A response with rcode=5 ("REFUSED") should be interpreted as a
permanent signal that DNS UPDATEs are not supported by the receiver.</t>

</section>
<section anchor="rcode-badkey"><name>RCODE BADKEY</name>

<t>A response with rcode=17 ("BADKEY") should be interpreted as a
definitive statement that the DNS UPDATE Receiver does not have access
to the public SIG(0) key needed for signature verification. In this
case the child should fall back to bootstrap of the SIG(0) public key
into the DNS UPDATE Receiver, see below.</t>

</section>
<section anchor="no-response-to-a-dns-update"><name>No response to a DNS UPDATE</name>

<t>The case of no response is more complex, as it is not possible to know
whether the DNS UPDATE actually reached the reciever (or was lost in
transit) or the response was not sent (or lost in transit).</t>

<t>For this reason it is suggested that a lack of response is left as
implementation dependent. That way the implementation has sufficient
freedom do chose a sensible approach. Eg. if the sender of the DNS
UPDATE (like the primary nameserver of the child zone) only serves a
single child, then resending the DNS UPDATE once or twice may be ok
(to ensure that the lack of response is not due to packets being lost
in transit). On the other hand, if the sender serves a large number of
child zones below the same parent zone, then it may already know that
the receiver for the DNS UPDATEs is not responding for any of the
child zones, and then resending the update immediately is likely
pointless.</t>

</section>
</section>
<section anchor="management-of-sig0-public-keys"><name>Management of SIG(0) Public Keys</name>

<t>Only the child should have access to the SIG(0) private key. The
corresponding SIG(0) public key can be published in DNS, but it
doesn't have have to be. The SIG(0) public key only needs to be
available to the parent DNS UPDATE Receiver. Keeping all the public
SIG(0) keys for different child zones in some sort of database is
perfectly fine.</t>

<section anchor="bootstrapping-the-sig0-public-key-into-the-dns-update-receiver"><name>Bootstrapping the SIG(0) Public Key Into the DNS UPDATE Receiver</name>

<t>Bootstrap is simpler if the child zone is signed. Therefore the signed
and unsigned cases are described separately.</t>

<section anchor="child-zone-is-dnssec-signed"><name>Child zone is DNSSEC-signed</name>

<t>If the child zone is DNSSEC-signed, then the preferred mechanism is to
publish the public SIG(0) key as a KEY record at the child apex. This
can then be looked up and validated by the DNS UPDATE Receiver.</t>

<figure><artwork><![CDATA[
child.parent. IN KEY ...
child.parent. IN RRSIG KEY ...
]]></artwork></figure>

<t>However, the receiver should have access to the key at the time of
receiving the update, it should not have to do DNS lookups and DNSSEC
validation in response to a DNS UPDATE message (that might open up for
various types of attacks). Therefore the proposal is to trigger the
parent reciver to lookup and validate the key by issuing a DNS UPDATE
that only contains an addition (no delete) of the KEY record from the
child zone:</t>

<figure><artwork><![CDATA[
ADD child.parent. {ttl} IN KEY ...
]]></artwork></figure>

<t>When receiving such a message the reciever SHOULD put that key into a
queue for later look up of the corresponding KEY record and validation
of the DNSSEC-signature. In case of validation failure (or absence of
a DNSSEC signature) the SIG(0) SHOULD NOT be added to the set of keys
that the receiver knows and trust. If the validation succeeds the key
should be added to the set of keys stored locally at the receiver.</t>

</section>
<section anchor="child-zone-is-unsigned"><name>Child zone is unsigned</name>

<t>In the absence of a DNSSEC-based validation path some alternative
mechanism will have ot be found. The primary audience for this DNS
UPDATE based synchronization mechanism is "non-registries". In those
cases there is by definition some mechanism in place to communicate
information from the child to the parent, be it email, a web form,
pieces of paper or something else. The same mechanism can be extended
to also be used to communicate the initial SIG(0) public key from the
child to the parent.</t>

<t>Should a "registry" parent want to support this mechanism (as a
service to its unsigned children) then the interface is usually EPP
<xref target="RFC5730"/> and would require the implementation of a new EPP
extension, which is clearly doable.</t>

</section>
</section>
<section anchor="rolling-the-sig0-key"><name>Rolling the SIG(0) Key</name>

<t>Once the parent DNS UPDATE Receiver has the key, the child can update 
it via a DNS UPDATE just like updating the NS RRset, the DS RRset or 
the glue in the parent zone (assuming a suitable DNS UPDATE policy in 
the parent). I.e. only the initial bootstrapping of the key is an
issue.</t>

<t>Note, however, that the alternative of re-bootstrapping (by whatever
bootstrapping mechanism was used) in case of a key compromise may be a
better alternative to the parent supporting key rollover for child
SIG(0) keys. The decision of whether to allow key rollover via DNS
UPDATE is left as parent-side policy.</t>

</section>
</section>
<section anchor="security-considerations"><name>Security Considerations.</name>

<t>Any fully automatic mechanism to update the contents of a DNS zone
opens up a potential vulnerability should the mechanism not be
implemented correctly.</t>

<t>In this case the definition of "correct" is a question for the
receiver of the DNS UPDATE. The receiver should validate the
authenticity of the DNS UPDATE and then do the same checks and
verifications as a CDS or CSYNC scanner does. The difference from the
scanner is only in the validation: single SIG(0) signature by a key
that the receiver trusts vs DNSSEC signature that chains back to a
DNSSEC trust anchor that a scanner trusts.</t>

</section>
<section anchor="iana-considerations"><name>IANA Considerations.</name>

<t>None.</t>

<t><vspace blankLines='999' /></t>

</section>
<section anchor="acknowledgements"><name>Acknowledgements.</name>

<t><list style="symbols">
  <t>Peter Thomassen and I together came up with the location mechanism
for the generalized notifications, which this draft relies upon.</t>
  <t>Mark Andrews provided the initial inspiration for writing some code
to experiment with the combination of the location mechanism from
the generalised notifications with DNS UPDATEs across zone cuts.</t>
</list></t>

</section>


  </middle>

  <back>


    <references title='Normative References'>



<reference anchor='RFC1996' target='https://www.rfc-editor.org/info/rfc1996'>
  <front>
    <title>A Mechanism for Prompt Notification of Zone Changes (DNS NOTIFY)</title>
    <author fullname='P. Vixie' initials='P.' surname='Vixie'/>
    <date month='August' year='1996'/>
    <abstract>
      <t>This memo describes the NOTIFY opcode for DNS, by which a master server advises a set of slave servers that the master's data has been changed and that a query should be initiated to discover the new data. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='1996'/>
  <seriesInfo name='DOI' value='10.17487/RFC1996'/>
</reference>

<reference anchor='RFC2136' target='https://www.rfc-editor.org/info/rfc2136'>
  <front>
    <title>Dynamic Updates in the Domain Name System (DNS UPDATE)</title>
    <author fullname='P. Vixie' initials='P.' role='editor' surname='Vixie'/>
    <author fullname='S. Thomson' initials='S.' surname='Thomson'/>
    <author fullname='Y. Rekhter' initials='Y.' surname='Rekhter'/>
    <author fullname='J. Bound' initials='J.' surname='Bound'/>
    <date month='April' year='1997'/>
    <abstract>
      <t>Using this specification of the UPDATE opcode, it is possible to add or delete RRs or RRsets from a specified zone. Prerequisites are specified separately from update operations, and can specify a dependency upon either the previous existence or nonexistence of an RRset, or the existence of a single RR. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='2136'/>
  <seriesInfo name='DOI' value='10.17487/RFC2136'/>
</reference>

<reference anchor='RFC3007' target='https://www.rfc-editor.org/info/rfc3007'>
  <front>
    <title>Secure Domain Name System (DNS) Dynamic Update</title>
    <author fullname='B. Wellington' initials='B.' surname='Wellington'/>
    <date month='November' year='2000'/>
    <abstract>
      <t>This document proposes a method for performing secure Domain Name System (DNS) dynamic updates. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='3007'/>
  <seriesInfo name='DOI' value='10.17487/RFC3007'/>
</reference>

<reference anchor='RFC2931' target='https://www.rfc-editor.org/info/rfc2931'>
  <front>
    <title>DNS Request and Transaction Signatures ( SIG(0)s )</title>
    <author fullname='D. Eastlake 3rd' initials='D.' surname='Eastlake 3rd'/>
    <date month='September' year='2000'/>
    <abstract>
      <t>This document describes the minor but non-interoperable changes in Request and Transaction signature resource records ( SIG(0)s ) that implementation experience has deemed necessary. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name='RFC' value='2931'/>
  <seriesInfo name='DOI' value='10.17487/RFC2931'/>
</reference>

<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname='S. Bradner' initials='S.' surname='Bradner'/>
    <date month='March' year='1997'/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name='BCP' value='14'/>
  <seriesInfo name='RFC' value='2119'/>
  <seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>

<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
  <front>
    <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
    <author fullname='B. Leiba' initials='B.' surname='Leiba'/>
    <date month='May' year='2017'/>
    <abstract>
      <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
    </abstract>
  </front>
  <seriesInfo name='BCP' value='14'/>
  <seriesInfo name='RFC' value='8174'/>
  <seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>

<reference anchor='RFC5730' target='https://www.rfc-editor.org/info/rfc5730'>
  <front>
    <title>Extensible Provisioning Protocol (EPP)</title>
    <author fullname='S. Hollenbeck' initials='S.' surname='Hollenbeck'/>
    <date month='August' year='2009'/>
    <abstract>
      <t>This document describes an application-layer client-server protocol for the provisioning and management of objects stored in a shared central repository. Specified in XML, the protocol defines generic object management operations and an extensible framework that maps protocol operations to objects. This document includes a protocol specification, an object mapping template, and an XML media type registration. This document obsoletes RFC 4930. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name='STD' value='69'/>
  <seriesInfo name='RFC' value='5730'/>
  <seriesInfo name='DOI' value='10.17487/RFC5730'/>
</reference>




    </references>



<section anchor="change-history-to-be-removed-before-publication"><name>Change History (to be removed before publication)</name>

<t><list style="symbols">
  <t>draft-johani-dnsop-delegation-mgmt-via-ddns-00</t>
</list></t>

<ul empty="true"><li>
  <t>Initial public draft.</t>
</li></ul>

</section>


  </back>

<!-- ##markdown-source:
H4sIAO3QP2UAA7VcbZPbRnL+Pr9iQn8IqVpSLz7H0aYuyUq7tvdsaZVdKVeu
q6sYBIYkvCCAwwBL0Sr99/TTPW8guXKuKucPd0sSmOnp6X766Z4ezedz1Zd9
Zc715GLom23Wl/VaX76905emMmv62NT6TVZna7M1da8fykxf0s8TlS2XnXk4
50/6Q1tkvbG6WaXvXderptvy36po8jrb0jxFl636+a/NJqvLeVHbpp0X4ZX5
dr3t5zTJvKCf5s+eKYx7rj9dXry/+qxy+rBuuv25tn2hVNl257rvBtu/ePbs
5bMXKutMdk7T9qarTa92TXe/7pqhPceKbt7pP9MXWN/3+FLdmz09UcQX5peQ
TSnbZ3XxP1nV1DT13ljVluf6L32Tn2nbdH1nVpb+2m/xx1+VyoZ+03TnSs+V
pv/K2p7rPy30XW9qGmnLX8ra/4RVj39oujUp4jde/bl+vzH6bmeK0m6CVPq7
ZqgL0SLeyOljDx3gQSPfmW1WVueatbqwbvz/LN0Iti9Xvamsod+MUrVsyoM5
JxX6LeJP8/lcZ0vbd1lOakh2sow7qaflwix0T5LSxt/eWtOf6baxtlxWRq+r
wSQfL+9UZ3JSsp1pu2mGqtBZtcv2Vi+NvjdtTyOTJuucPvc7Y2qdb0p66DdS
vaZN0C1tad0rfF7oH5qdeTDdGV5qIWOZGxIko1Gsrpvejw3Z8syahVJ/3tCY
+FycXox70UvBb0YJSqsGO2RVtdc7ZzqrsqYFLode70radvp/vJNtsSkw/84U
2K0634tk9CtLr5tdbTpdlfeGRjMfW5P3JGmjN9kDlmbqnMb1Oqr3ejV09G5H
C21Ik1uraFMHEqmHAdAzeI9W2We0XU1b5vR1bc3fBgxkaeUwJbgmLE/bNiNV
bTJLAjyYgmUn0Wj1bnhNKiEd5VlBXgzFl72qoWy9bvAN6XWhb0j1XQapziDH
rqwq7R/iRzQpoax0RsKTzuAYQBSab2ty+LuVeTbNDiu/N6Zl7Y02RHbCv1vm
rH0StDBt1exNwUvD5yYfGJJoBWRvJKQd8g3NHebCkzf61ZW+vXpz899Xl3Cv
9MUSVog9zZuqypZNx6KKDN+Tgoalzvpz9ZdN37f2/OnTNX+3yJvtU4Gvj0//
DjD76/T/Z5zZgrd229iejC3HQrxt0k5Y6JDMkE3eLfRMN62BqZP9EHCZPo+G
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

-->

</rfc>

